1. What is the T(N) of the following method?  n^2 + 2n + 5
2. What is the Big O of the following method? n^2

public double total(double[] list){						1	
	double tot = 0;										1
	for(int i = 0; i < list.length; i++)				1 + n + 1 + n
	    tot += list[i];									n(n)
	return total;										1
}

3. What is the best case and worst case T(N) of the following code segment? Best: 2n^2 + 5n + 4   Worst: 7n^2 + 5n + 4
4. What is the best case and worst case Big O of the following code segment? Best: n^2   Worst: n^2


public static void sort2(int[] list){					1
	boolean sorted = false;								1
	int limit = list.length;							1
	int temp;											1

	while( !sorted ){									n
		limit = limit - 1;								n(1)
		sorted = true;									n
		for(int i = 0; i < limit; i++){					n(1 + n + 1 + n) = n + n^2 + n + n^2
			if( list[i] > list[i + 1] ){				Best: n^2 Worst: n^2 (1 + 1 + 1 + 1 + 1) = 5n^2
				temp = list[i];
				list[i] = list[i + 1];
				list[i + 1] = temp;
				sorted = false;
			}
		}
	}
}


5. What is the Big O of the following method? O(n^2)

Assume the ArrayList consturctor, the Math.sqrt, and the ArrayList add method
are all O(1).

/*
 * pre: limit >= 2
 */
public static ArrayList<Integer> findPrimes(int limit)				1
{   boolean numIsPrime = true;										1
	int numToDivideBy = 2;											1
	ArrayList<Integer> primes = new ArrayList<Integer>();			1
	// ArrayList default constructor is O(1)

	// go through all numbers
	for(int num = 2; num < limit; num++){							1 + n + 1 + n
	    numIsPrime = true;											(n)(1)
		numToDivideBy = 2;											(n)(1)

		double maxDivisor = Math.sqrt(num);							(n)(1)
		while( numToDivideBy <= maxDivisor ){						(n)(n)
		    assert numToDivideBy != 0 : numToDivideBy;				
			if ( num % numToDivideBy == 0)							Best: (n)(n)(1)  Worst: (n)(n)(1 + 1)
				numIsPrime = false;									

			numToDivideBy++;										(n)(n)
		}

		if( numIsPrime )											Best: (n)(n)  Worst: (n)(n)(1 + 1)
			primes.add(num); //ArrayList add is O(1)
	}
	return primes													1
}

7. Do you think the Big O of the given findPrimes method can be improved? If so,
how?  

Yes, by not nesting the while loop in the for loop and instead just 
having a series of loops that would break if it is not a prime number. 


8. What is the best case and worst case Big O of the following method assuming
listA and listB are of the same length? Both are the same O(n^2)

public static boolean isPermutation(int[] listA, int[] listB){		1 + 1
	assert (listA != null && listB != null) : "Violation of precondition:
	isPermutation";
	boolean result = listA.length == listB.length;					1
	if( result ){													1
		boolean[] used = new boolean[listA.length];					n
		int a = 0;													1
		int b;														1
		boolean foundInB = false;									1
		while(result && a < listA.length){							n
			b = 0;													n(1)
			foundInB = false;										n(1)
			while( !foundInB && b < listB.length){					(n)(n)
				foundInB = (listA[a] == listB[b]) && !used[b];		(n)(n)(1)
				b++;												(n)(n)(1)
			}
			if( foundInB )											Best: n(1+1) 
				used[b - 1] = true;
			else													
				result = false;
			a++;													1
		}
	}

	return result;													1
}

9. What is the best case and worst case Big O of the following method assuming
listA and listB are of the same length? The System.arraycopy methodis O(N) and
the Arrays.sort method is O(NlogN).  Both are the same O(NlogN).

public static boolean isPermutation2(int[] listA, int[] listB){		1 + 1 + 1
	assert (listA != null && listB != null) : "Violation of precondition:
	isPermutation";
	boolean result = listA.length == listB.length;					1
	if( result ){													1
		int[] copyA = new int[listA.length];						N
		int[] copyB = new int[listB.length];						N
		System.arraycopy(listA, 0, copyA, 0, listA.length);			N
		System.arraycopy(listB, 0, copyB, 0, listB.length);			N
		Arrays.sort(copyA);											NlogN
		Arrays.sort(copyB);											NlogN
		int pos = 0;												1
		while(result && pos < copyA.length){						N
			result = copyA[pos] == copyB[pos];						N(1)
			pos++;													N(1)
		}
	}
	return result;													1
}

10. A program is O(N). It takes the program 8 seconds to complete when working
with a data set of 100,000 items. (N = 100,000) What is the predicted time for
the program to complete when working with a data set of 200,000 items?  160s

11. A program is O(N). It takes the program 12 seconds to complete when working
with a data set of 1,000,000 items. What is the predicted time for the program
to complete when working with a data set of 5,000,000 items?  60s

12. A program is O(N^2). It takes the program 5 seconds to complete when working
with a data set of 10,000 items. (N = 10,000) What is the predicted time for the
program to complete when working with a data set of 20,000 items?  20s

13. A program is O(N^2). It takes the program  1 minute to complete when working
with a data set of 100,000 items. (N = 100,000) What is the predicted time for
the program to complete when working with a data set of 500,000 items?  25min

14. A program is O(N^2). It takes the program 40 seconds to complete when
working with a data set of 500,000 items. (N = 500,000) What is the predicted
time for the program to complete when working with a data set of 25,000 items?  0.1s

15. A program is O(N^3). It takes the program 5 minutes to complete when working
with a data set of 1,000,000 items. What is the predicted time for the program
to complete when working with a data set of 3,000,000 items?  135min

16. A program is O(NlogN) (the log is base 2). It takes the program 10 seconds
to complete when working with a data set of 1,000,000 items. What is the
predicted time for the program to complete when working with a data set of
8,000,000 items? log (base 2) of 1,000,000 ~= 20.  90.9s
